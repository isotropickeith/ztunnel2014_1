/* OpenProcessing Tweak of *@*http://www.openprocessing.org/sketch/34101*@* */
/* !do not delete the line above, required for linking your tweak if you upload again */
/* Andy Wallace
 * Particle Letters
 * 2010
 *
 * Click to have the particles form the word
 */
 
import hypermedia.net.*;

 
Particle[] particles=new Particle[0];
boolean free=true;  //when this becomes false, the particles move toward their goals

int freePeriod = 13;  // 13 sec. preriod for free/not free states
int fps = 30;         // framerate

float pAccel=.05;  //acceleration rate of the particles
float pMaxSpeed=2;  //max speed the particles can move at

color bgColor=color(0);

PImage words;  //holds the image container the words
color testColor=color(255);  //the color we will check for in the image. Currently black

color nearColor = color(255,0,0);
color farColor = color(255,255,255);

// Globals
int ledsPerStrip = 157;
int bytesPerLed = 3;
int bytesPerStrip = ledsPerStrip * bytesPerLed;
int numStripsPerPacket = 16;
int numStripsPerSystem = 128;
int bufSize = bytesPerStrip * numStripsPerPacket + 4 + 4;  // Strip data (471*16) + 8 byte UDP header)+ 4 bytes type + 4 bytes seq.
byte[] buf = new byte[bufSize];

String[]ipaddr = {"192.168.1.177",    // stripctrl0 remote IP address
                  "192.168.1.178",    // stripctrl1
                  "192.168.1.179",    // stripctrl2
                  "192.168.1.180",    // stripctrl3
                  "192.168.1.181",    // stripctrl4
                  "192.168.1.182",    // stripctrl5
                  "192.168.1.183",    // stripctrl6
                  "192.168.1.184"};   // stripctrl7
int destPort        = 6000;       // the destination port
int srcPort         = 6000;       // the source port
long seq;                         // tx packet sequence number
int secs            = 0;          // elapsed seconds
long timeStamp       = 0;          // Timestamp
int effectIdx      = 0;
byte r = 0;
byte g = (byte)0xFF;
byte b = (byte)0xFF;
UDP udp;  // define the UDP object

void setup()
{
  frameRate(fps);
  
   seq = 1;                      // seq # starts at 1
   for(int i= 0; i < bufSize; i++) { 
     buf[i] = (byte)0xFF;
   }  // set pattern in buf

  
  words=loadImage("text2.png");
  size(157,128);
  noCursor();
  stroke(255);
  
  //go through the image, find all black pixel and create a particle for them
  //start by drawing the background and the image to the screen
  background(bgColor);
  image(words,0,0);  //draw the image to screen
  loadPixels();  //lets us work with the pixels currently on screen
  
  //go through the entire array of pixels, creating a particle for each black pixel
  for (int x=0; x<width; x++){
    for (int y=0; y<height; y++){
      if (pixels[GetPixel(x,y)] == testColor){
        particles=(Particle[])append(particles, new Particle(x,y));
      }
    }
  }
  println("# particles : " + particles.length);
  
  udp = new UDP( this, srcPort );  // create a new datagram connection on port 6000
  //udp. log( true );            // <-- print out the connection activity
  print("UDP Buffer Size: ");
  println(UDP.BUFFER_SIZE);
  udp.listen( true );           // and wait for incoming message

}

void draw(){
  background(bgColor);
  
  if(frameCount % (freePeriod * fps) == 0)
  {
    free = !free;  // toggle free state every freePeriod seconds
  }
  
  for (int i=0; i<particles.length; i++){
    if (particles[i].y<0){
      //println("TOO FUCKNG HIGH");
    }
    particles[i].Update();
  }
  //saveFrame("pic/edu-####.png");
  sendImage();

}


void mousePressed(){
  free=false;
}
void mouseReleased(){
  free=true;
}

//returns the locaiton in pixels[] of the point (x,y)
int GetPixel(int x, int y) {
  return(x+y*width);
}
 
void sendImage() {
  loadPixels();
  
  int ipidx = 0;     // index into array of IP addresses for strip controllers

  for(int lineidx = 0; lineidx < numStripsPerSystem; lineidx += numStripsPerPacket)
  {
    int pixelIdx = ledsPerStrip * lineidx;
  
    for(int i= 8; i < bytesPerStrip * numStripsPerPacket + 8 - 1; i += 3) {
      color curPixel = pixels[pixelIdx];
      buf[i] = (byte) blue(curPixel);    // Blue
      buf[i+1] = (byte) green(curPixel);  // Green
      buf[i+2] = (byte) red(curPixel);  // Red
    
      pixelIdx++;
    }  // set pattern in buf
     // Put a type 0 in the first long to signify this is a Strip Data packet
    buf[0] = 0;  
    buf[1] = 0;
    buf[2] = 0;
    buf[3] = 0;
  
    // put a sequence # in the next 4 bytes of buf (little endien)
    buf[4] = (byte)(seq & 0xFF);
    buf[5] = (byte)((seq & 0xFF00) >> 8);
    buf[6] = (byte)((seq & 0xFF0000) >> 16);
    buf[7] = (byte)((seq & 0xFF000000) >> 24);
    udp. send(buf, ipaddr[ipidx++], destPort );    // the message to send
  }
  seq++;  
}

